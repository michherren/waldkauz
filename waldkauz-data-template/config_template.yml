###################################################################
# Kowl considers config options from three sources:
# Flags, YAML config and env variables - in that order.
# Accordingly env variables and YAML configs can overwrite input
# that is set via flags. 
#
# --- YAML
# If you want to configure Kowl using a YAML file, specify the path
# either by setting the flag -config.filepath or by providing 
# the path via the env variable CONFIG_FILEPATH.
#
# --- Env variables
# All config options can be configured via environment variables 
# as well.
# Env variables that expect array values can be provided by providing
# a comma separated string ("kafka-0:9092,kafka-1:9092").
# The env variable name is auto generated by upper casing the YAML
# equivalent and adding an underscore for each indentation/level.
#
# Some examples:
# kafka.rackId => KAFKA_RACKID
# kafka.tls.caFilepath => KAFKA_TLS_CAFILEPATH
#
# --- Note
# Commented config settings are optional and show the defaults
###################################################################
frontendPath: waldkauz-data/frontend/kowl
kafka:
  brokers:
    - BOOTSTRAP-URL:9092
  # clientId: kowl
  # rackId: # In multi zone Kafka clusters you can reduce traffic costs by consuming messages from replica brokers in the same zone
  sasl:
    enabled: true
    username: USERNAME
    password: PASSWORD
  #   mechanism: PLAIN # PLAIN, SCRAM-SHA-256, SCRAM-SHA-512 and GSSAPI are supported
  #   gssapi:
  #     authType:
  #     keyTabPath:
  #     kerberosConfigPath:
  #     serviceName:
  #     username:
  #     password: # can be set via the --kafka.sasl.gssapi.password flag as well
  #     realm:
  tls:
    enabled: true
  #   caFilepath:
  #   certFilepath:
  #   keyFilepath:
  #   passphrase: # This can be set via the --kafka.tls.passphrase flag as well
  #   insecureSkipTlsVerify: false
  # schemaRegistry:
  #   enabled: true
  #   urls: [] # Url with scheme is required, e.g. ["http://localhost:8081"]
  #   username: # Basic auth username
  #   password: # Basic auth password
  #   bearerToken:
  #   tls:
  #     caFilepath: # Path to a custom CA file. If not specified the system's / trusted root ca is used.
  # protobuf:
  #   enabled: false
  #   mappings: []
  #     # Map the proto type names for each of your topics. These proto types will be used for deserialization
  #     # - topicName: xy
  #     #   valueProtoType: fake_model.Order # You can specify the proto type for the record key and/or value (just one will work too)
  #     #   keyProtoType: package.Type
#     # Git is where the .proto files come from, in the future there might be additional options
#     git:
#       enabled: false
#       repository:
#         url:
#         branch: (defaults to primary/default branch)
#       # How often Kowl shall pull the repository to look for new files. Set 0 to disable periodic pulls
#       refreshInterval: 1m
#       # Basic Auth
#       # If you want to use GitHub's personal access tokens use `token` as username and pass the token as password
#       basicAuth:
#         enabled: true
#         username: token
#         password: #  This can be set via the via the --owl.topic-documentation.git.basic-auth.password flag as well
#       # SSH Auth
#       # You can either pass the private key file directly via flag or yaml config or refer to a mounted key file
#       ssh:
#         enabled: false
#         username:
#         privateKey: # This can be set via the via the --owl.topic-documentation.git.ssh.private-key flag as well
#         privateKeyFilepath:
#         passphrase: # This can be set via the via the --owl.topic-documentation.git.ssh.passphrase flag as well

# owl:
#   # Config to use for embedded topic documentation, see /docs/features/topic-documentation.md for more details
#   topicDocumentation:
#     enabled: false
#     # Git is where the topic documentation can come from, in the future there might be additional options
#     git:
#       enabled: false
#       repository:
#         url:
#         branch: (defaults to primary/default branch)
#       # How often Kowl shall pull the repository to look for new files. Set 0 to disable periodic pulls
#       refreshInterval: 1m
#       # Basic Auth
#       # If you want to use GitHub's personal access tokens use `token` as username and pass the token as password
#       basicAuth:
#         enabled: true
#         username: token
#         password: #  This can be set via the via the --owl.topic-documentation.git.basic-auth.password flag as well
#       # SSH Auth
#       # You can either pass the private key file directly via flag or yaml config or refer to a mounted key file
#       ssh:
#         enabled: false
#         username:
#         privateKey: # This can be set via the via the --owl.topic-documentation.git.ssh.private-key flag as well
#         privateKeyFilepath:
#         passphrase: # This can be set via the via the --owl.topic-documentation.git.ssh.passphrase flag as well

# server:
#   listenPort: 8080
#   listenAddress:
#   gracefulShutdownTimeout: 30s
#   listenPort: 8080
#   readTimeout: 30s
#   writeTimeout: 30s
#   idleTimeout: 30s
#   compressionLevel: 4
#   basePath: # Sub-path under which kowl is hosted. See 'docs/features/hosting.md' for more information
#   setBasePathFromXForwardedPrefix: true # Whether or not to check the 'X-Forwarded-Prefix' header to (potentially) override 'basePath'
#   stripPrefix: true # Whether or not kowl should strip the prefix internally

# logger:
#   level: info # Valid values are: debug, info, warn, error, fatal

# Only relevant for developers, who might want to run the frontend separately
# serveFrontend: true

# Prefix for all exported prometheus metrics
# metricsNamespace: kowl
